generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  active          Boolean @default(true)
  partnerId       String?
  acronisTenantId String?
  role            String?
  language        String? @default("tr")

  deleted   Boolean  @default(false)
  createdBy String
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  partner Partner? @relation(fields: [partnerId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Partner {
  id            String    @id @default(cuid())
  applicationId String?   @unique
  acronisId     String    @unique
  active        Boolean   @default(true)
  name          String
  email         String
  mobile        String?
  phone         String?
  billingDate   DateTime?

  createdBy String
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  customers   Customer[]
  licenses    License[]
  users       User[]
  application Application? @relation(fields: [applicationId], references: [id])
}

model Customer {
  id          String    @id @default(cuid())
  partnerId   String
  acronisId   String?   @unique
  billingDate DateTime?

  createdBy String
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  licenses License[]
  partner  Partner   @relation(fields: [partnerId], references: [id])
}

model License {
  id         String  @id @default(cuid())
  productId  String
  partnerId  String?
  customerId String?
  key        String  @unique
  serialNo   String  @unique

  expiresAt   DateTime?
  assignedAt  DateTime?
  activatedAt DateTime?

  createdBy String
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  product  Product   @relation(fields: [productId], references: [id])
  partner  Partner?  @relation(fields: [partnerId], references: [id])
  customer Customer? @relation(fields: [customerId], references: [id])
}

model Product {
  id    String  @id @default(cuid())
  code  String  @unique
  name  String
  model String?
  quota Int?
  unit  String?
  // price Float?

  active    Boolean  @default(true)
  createdBy String
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  licenses License[]
}

model Application {
  id              String    @id @default(cuid())
  companyType     String
  name            String
  taxNo           String
  taxOffice       String
  email           String    @unique
  phone           String
  mobile          String
  address         String
  city            Int
  district        String
  postalCode      String
  applicationDate DateTime
  approvedAt      DateTime?
  approvedBy      String?

  createdBy String
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  partner Partner?
}

model Course {
  id               String  @id @default(cuid())
  category         String
  name             String
  shortDescription String
  description      String?
  duration         String
  level            String
  image            String?

  active    Boolean  @default(true)
  createdBy String
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  chapters Chapter[]
}

model Chapter {
  id       String @id @default(cuid())
  courseId String
  name     String
  order    Int?

  active    Boolean  @default(true)
  createdBy String
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  course  Course   @relation(fields: [courseId], references: [id])
  lessons Lesson[]
}

model Lesson {
  id          String  @id @default(cuid())
  chapterId   String
  name        String
  description String?
  order       Int?
  link        String

  active    Boolean  @default(true)
  createdBy String
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id])
}
