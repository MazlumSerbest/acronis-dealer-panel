generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  active          Boolean @default(true)
  partnerId       String?
  acronisTenantId String?
  role            String?
  language        String? @default("tr")

  createdBy String?
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  partner Partner? @relation(fields: [partnerId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Partner {
  id        String  @id @default(cuid())
  acronisId String? @unique

  createdBy    String?
  createdAt    DateTime      @default(now())
  updatedBy    String?
  updatedAt    DateTime      @updatedAt

  clients      Client[]
  licenses     License[]
  users        User[]
  applications Application[]
}

model Client {
  id          String    @id @default(cuid())
  partnerId   String
  acronisId   String?   @unique
  billingDate DateTime?

  createdBy String?
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  partner Partner @relation(fields: [partnerId], references: [id])
}

model License {
  id              String @id @default(cuid())
  partnerId       String
  key             String @unique
  typeSerialNo    String
  licenseSerialNo String @unique

  // expiresAt DateTime?
  boughtAt    DateTime?
  activatedAt DateTime?

  createdBy String?
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  partner Partner @relation(fields: [partnerId], references: [id])
}

model Application {
  id              String   @id @default(cuid())
  partnerId       String?
  companyType     String
  name            String
  taxNo           String
  taxOffice       String
  email           String
  phone           String
  mobile          String
  address         String
  city            String
  district        String
  postalCode      String
  applicationDate DateTime
  approvedAt      DateTime
  approvedBy      String

  createdBy String?
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  partner Partner? @relation(fields: [partnerId], references: [id])
}
