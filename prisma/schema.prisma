generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  role            String?
  active          Boolean   @default(true)
  createdBy       String
  updatedBy       String?
  acronisTenantId String?
  partnerId       String?
  language        String?   @default("tr")
  licensed        Boolean   @default(false)
  deleted         Boolean   @default(false)
  accounts        Account[]
  sessions        Session[]
  partner         Partner?  @relation(fields: [partnerId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Partner {
  id              String    @id @default(cuid())
  acronisId       String    @unique
  applicationId   String?   @unique
  parentAcronisId String?
  // parentId        String?
  active          Boolean   @default(true)
  name            String?
  // email           String
  // mobile          String?
  // phone           String?
  billingDate     DateTime?

  createdBy String
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  customers   Customer[]
  licenses    License[]
  application Application? @relation(fields: [applicationId], references: [id])
  parent      Partner?     @relation("parent", fields: [parentAcronisId], references: [acronisId])
  children    Partner[]    @relation("parent")
  users       User[]
}

model Customer {
  id          String    @id @default(cuid())
  partnerId   String
  acronisId   String?   @unique
  name        String?
  billingDate DateTime?
  active      Boolean   @default(true)

  createdBy String
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  partner  Partner   @relation(fields: [partnerId], references: [id])
  licenses License[]
}

model License {
  id          String    @id @default(cuid())
  partnerId   String?
  customerId  String?
  key         String    @unique
  activatedAt DateTime?
  serialNo    String    @unique
  productId   String
  expiresAt   DateTime?
  assignedAt  DateTime?
  // deductedFromQuota Boolean   @default(false)

  createdBy String
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  customer Customer? @relation(fields: [customerId], references: [id])
  partner  Partner?  @relation(fields: [partnerId], references: [id])
  product  Product   @relation(fields: [productId], references: [id])
}

model Product {
  id      String  @id @default(cuid())
  code    String  @unique
  name    String
  model   String?
  active  Boolean @default(true)
  quota   Int?
  unit    String?
  bytes   BigInt?
  edition String?

  createdBy String
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  licenses License[]
}

model Application {
  id              String    @id @default(cuid())
  parentAcronisId String
  companyType     String
  name            String
  taxNo           String
  taxOffice       String
  email           String    @unique
  phone           String
  mobile          String
  address         String
  district        String
  postalCode      String
  applicationDate DateTime
  approvedAt      DateTime?
  approvedBy      String?
  city            Int

  createdAt DateTime @default(now())
  createdBy String
  updatedAt DateTime @updatedAt
  updatedBy String?

  partner Partner?
}

model Course {
  id               String  @id @default(cuid())
  category         String
  name             String
  shortDescription String
  description      String?
  duration         String
  level            String
  image            String?
  active           Boolean @default(true)

  createdBy String
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  chapters Chapter[]
}

model Chapter {
  id       String  @id @default(cuid())
  courseId String
  name     String
  active   Boolean @default(true)
  order    Int

  createdBy String
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  course  Course   @relation(fields: [courseId], references: [id])
  lessons Lesson[]
}

model Lesson {
  id          String  @id @default(cuid())
  chapterId   String
  name        String
  description String?
  link        String
  active      Boolean @default(true)
  order       Int

  createdBy String
  createdAt DateTime @default(now())
  updatedBy String?
  updatedAt DateTime @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id])
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view v_ActiveLicenses {
  id                String?
  expiresAt         DateTime?
  activatedAt       DateTime?
  code              String?
  model             String?
  quota             Int?
  unit              String?
  bytes             BigInt?
  partnerAcronisId  String?
  customerAcronisId String?

  @@ignore
}
